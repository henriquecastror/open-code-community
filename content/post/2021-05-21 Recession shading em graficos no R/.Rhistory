library(tidyquant) # Utilizado para importar os dados da sÃ©rie temporal.
library(dplyr) # Utilizado para fazer a manipullaÃ§Ã£o dos dados.
library(ggplot2) # Utilizado para construir os grÃ¡ficos.
# Utilizaremos a sÃ©rie temporal do Personal Consumer Expenditures,
# disponÃ­vel no FRED.
# ObservaÃ§Ã£o: como os dados sÃ£o obtidos do FRED, temos que usar o cÃ³digo da
# sÃ©rie utilizado por ele. Nesse caso, o cÃ³digo Ã© "PCE".
# Usaremos a funÃ§Ã£o tq_get() da biblioteca tidyquant para importar os dados
# da sÃ©rie temporal escolhida.
inicio = '2000-01-01'
fim = '2021-04-01'
df = 'PCE' %>%
tq_get(get  = "economic.data",
from = inicio,
to   = fim)
# Infelizmente o FRED nÃ£o disponibiliza de forma tÃ£o concisa os dados
# necessÃ¡rios. Embora eles estejam disponÃ­veis neste link
# (fredhelp.stlouisfed.org/fred/data/understanding-the-data/recession-bars),
# nÃ£o hÃ¡ nenhum arquivo do FRED, ao menos que tenha chegado ao conhecimento
# dos autores, que esteja disponÃ­vel com esses dados.
# Por esse motivo, um dos autores fez a transposiÃ§Ã£o desses dados para um
# arquivo .csv e o disponibilizou na internet, facilitando o processo para
# outros que queiram replicar o cÃ³digo.
# Para efetivamente importar os dados, utilizamos a funÃ§Ã£o read.csv().
recessoes_nber = read.csv('https://fqueiroz.netlify.app/uploads/recessoes_nber.csv',
sep = ',')
# Realizamos, tambÃ©m, uma pequena mudanÃ§a de nome das colunas, apenas para
# simplificar o processo.
names(recessoes_nber) = c('start', 'end')
recessoes_nber$start = as.Date(recessoes_nber$start)
recessoes_nber$end = as.Date(recessoes_nber$end)
Agora, podemos selecionar apenas as recessÃµes que estÃ£o no perÃ­odo de interesse.
# Selecionamos, a partir da funÃ§Ã£o subset(), apenas as recessÃµes que tem
# seu fim nos perÃ­odos de interesse ou que ainda estÃ£o ocorrendo (ou nÃ£o
# possuem data definida de tÃ©rmino).
recessoes_nber = subset(recessoes_nber,
(end >= min(df$date) | is.na(end)))
# Utilizamos a funÃ§Ã£o is.na() para determinar se hÃ¡ alguma recessÃ£o ainda
# ocorrendo, jÃ¡ que nesse caso, nÃ£o hÃ¡ nenhum valor de data na cÃ©lula que
# indicaria a data do fim da recessÃ£o.
Realizaremos a manipulaÃ§Ã£o dos dados de datas de inÃ­cio e de fim das recessÃµes.
# Primeiro, substituÃ­mos os valores em que nÃ£o hÃ¡ data (recessÃ£o ainda estÃ¡
# ocorrendo) pelo valor mÃ¡ximo da data na sÃ©rie temporal de interesse. Se
# nÃ£o houver nenhuma recessÃ£o em andamento, nada serÃ¡ feito.
recessoes_nber[is.na(recessoes_nber)] = max(df$date)
# ApÃ³s isso, substituÃ­mos os valores de data de inÃ­cio da recessÃ£o que estÃ£o
# localizados fora do perÃ­odo de interesse, pelo valor mÃ­nimo de data da
# sÃ©rie temporal. Isso serÃ¡ importante caso o usuÃ¡rio selecione o inÃ­cio da
# sÃ©rie temporal dentro de um perÃ­odo de recessÃ£o. Se esse nao for o caso,
# nada ocorrerÃ¡.
recessoes_nber$start[recessoes_nber$start < min(df$date)] = min(df$date)
Agora, temos os dados de recessÃ£o manipulados e os dados da sÃ©rie temporal. JÃ¡ podemos elaborar o grÃ¡fico com esses dados.
Construiremos o grÃ¡fico utilizando o pacote ggplot2.
# Para indicar os perÃ­odos recessivos, vamos utilizar o geom_rect, que
# colocarÃ¡ retÃ¢ngulos no grÃ¡fico entre as datas de inÃ­cio e fim das
# recessÃµes. Colocamos a cor e transparÃªncia desejadas como parÃ¢metro.
df %>%
ggplot() +
geom_rect(data = recessoes_nber,
aes(xmin = start, xmax = end, ymin = -Inf, ymax = +Inf),
fill='#FEF3DE', alpha=0.8, col="#FEF3DE") +
geom_line(aes(x=date, y=price), size = 1, color = "dodgerblue3") +
labs(x = 'Data',
y = 'BilhÃµes de US$',
title = 'Personal Consumption Expenditures',
caption = "Dados: U.S. Bureau of Economic Analysis. ElaboraÃ§Ã£o prÃ³pria.") +
theme_light() +
scale_x_date(breaks = scales::pretty_breaks(n = 8), expand = c(0,0)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8))

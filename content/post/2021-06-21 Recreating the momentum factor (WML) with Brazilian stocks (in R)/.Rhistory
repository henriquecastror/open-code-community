rm(list=ls()) ### clear workspace, memory and close open plots
gc()
graphics.off()
library(plyr) # data handling
library(lubridate)
library(readr) # data reading
library(BatchGetSymbols) #fetching financial data
library(future) #parallel computing
library(zoo)
library(tidyquant) #financial data handling
library(reshape2)
library(ggplot2)
if (!require('nefindata')) devtools::install_github('fernandoramacciotti/nefindata/R-package')
tickers <- read.csv('https://www.dropbox.com/s/4cj90vxwbdn3tab/tickers.txt?dl=1') #tickers file
tickers <- paste(tickers$ticker,'.SA',sep='') # All Yahoo Finance tickers include .SA at the end of the ticker.
tickers <- c(tickers,'^BVSP') # Include benchmark
Now we download historical adjusted prices, format dates and calculate financial volume. As we want monthly data on the momentum factor, the yearmon variable is important to be defined. As it may take a while to download historical prices, I suggest to go parallel.
first.date <- '2011-01-01'
last.date <- '2021-05-30'
freq <- 'daily'
future::plan(future::multisession, # Enables parallel computing
workers = 3) # Define number of cores
raw.df <- BatchGetSymbols(tickers = tickers,first.date = first.date  #Fetching data from Yahoo Finance
,last.date = last.date
,type.return = 'log'
,freq.data = freq
,thresh.bad.data = 0.01 # we will filter data frequency later
,bench.ticker = '^BVSP'
,do.parallel = TRUE #disable if you don't want to go parallel
)
df <- raw.df$df.tickers
df <- df %>% mutate(ticker= gsub(pattern = '\\^',replacement = '',x = ticker) #remove the '^' from ^BVSP ticker
,sticker= substr(ticker,1,4) #Retrieve short tickers to filter same-company asset codes,
,year=year(ref.date)
,month=month(ref.date)
,fvolume=volume*df$price.close #Yahoo data provides the  number of shares traded, not financial volume.
,yearmon=as.yearmon(ref.date)
,tickeryear=paste(ticker,year,sep='')
)
According to NEFIN,  a stock is eligible to the sample if it meets three criteria:
1. The stock is the most traded stock of the firm (the one with the highest traded volume during last year).
df.vol <- df %>% group_by(ticker,sticker,year) %>%
summarize(svol=sum(fvolume),count=n()) %>%
mutate(lvol=lag(svol,1,order_by = year),lcount=lag(count,1,order_by = year))
df.vol$tickeryear=paste(df.vol$ticker,df.vol$year,sep='')
df1 <- df.vol %>% group_by(sticker,year) %>% top_n(1,lvol) # pick the most traded asset if there is more than one ticker for a given company.
thresh <- 0.8
volume <- 500000
df$ptrade <- df$fvolume > volume
df2 <- df %>% group_by(ticker,year) %>%
summarise(nthresh=sum(ptrade)) %>% mutate(nthreshl=lag(nthresh,1))
df2 <-join(x=df2,y=df.vol,by=c('ticker','year')) %>%
mutate(pthresh=nthresh/count, pthreshl=nthreshl/lcount) %>%
filter(pthreshl>thresh)
df3 <- df %>%
group_by(ticker) %>%
mutate(first_year = min(year)) %>%
filter(year > first_year) %>%
select(-c(first_year))
ftickers <- Reduce(intersect,list(df1$tickeryear,df2$tickeryear,df3$tickeryear))
port <- df %>% group_by(ticker) %>% tq_transmute(select = 'price.adjusted'
,mutate_fun = periodReturn
,period='monthly'
,type = 'log'
,leading=FALSE)
port<- port %>% rename(mret = monthly.returns)
port$yearmon <- as.yearmon(port$ref.date)
closing.prices <- df %>% select(c(ticker,ref.date,price.adjusted))
nport <- join(x = port,y = closing.prices,by = c('ticker','ref.date'))
ndf <- nport %>%
arrange(ref.date) %>% group_by(ticker) %>%
mutate(lret=log(lag(price.adjusted,2)/lag(price.adjusted,12)))
ndf$year<- year(ndf$ref.date)
ndf$tickeryear <- paste(ndf$ticker,ndf$year,sep='')
ndf <- ndf %>% filter (tickeryear %in% ftickers) #keep only eligible stocks
ndf <- ndf %>% group_by(yearmon) %>%
mutate(tercile=ntile(x = lret,n = 3))
wml <- na.omit(ndf) %>% group_by(yearmon) %>%
summarise(wml=mean(mret[tercile==3])-mean(mret[tercile==1])) %>% ungroup() %>% mutate(cwml=cumprod(1+wml))
nefin <- get_risk_factors(factors = 'WML',agg = 'daily')
nefin <- nefin %>% mutate(ref.date=as.Date(paste(year,'-',month,'-',day,sep = '')))
nefin$yearmon <- as.yearmon(nefin$ref.date)
nefin <- nefin %>% arrange(ref.date) %>%
group_by(yearmon) %>% summarise(nefin_wml=(prod(1+WML)-1))
fdf <- join(x = wml,y = nefin,by='yearmon') %>% # Merging our data with NEFIN's
mutate(cnefin_wml=cumprod(1+nefin_wml))
print(cor(fdf$wml,fdf$nefin_wml))
ldf <- melt(data = fdf,id.vars = 'yearmon') # long format for ggplot
p <- ggplot(filter(ldf,variable %in% c('cwml','cnefin_wml'))) + geom_line(aes(y=value,x=yearmon,group=variable,color=variable))
p<- p + xlab(label = 'Date') + ylab(label='Cumulative return')
print(p)

library(readxl)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(gganimate)
data  <- read_excel("Randomization_data.xlsx", range = "A1:C101")
ggplot(data, aes(y=variable, fill=Group)) +
geom_boxplot()+
labs( y = "", x="", title = "Boxplot of variable X - Control and Treatment groups")+
theme(plot.title = element_text(color="black", size=30, face="bold"),
panel.background = element_rect(fill = "grey95", colour = "grey95"),
axis.text.y = element_text(face="bold", color="black", size = 18),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.key.size = unit(3, "cm"))
tapply(data$variable, data$Group, summary)
t.test(variable ~ Group, data = data)
comb <- 25000
df <- data.frame(matrix(ncol = 2, nrow = comb))
colnames(df) <- c("order" ,"diff")
for (i in seq(from = 1 , to =comb )  ) {
set.seed(i)                               # setting seed to ensure reproducibility
data$temp <- runif(100, min = 0, max = 1) # creating 100 random numbers 0 to 1
data <- data[order(data$temp),]           # sorting data by the random numbers generated in previous row
data$rank <- rank(data$temp)              # ranking by the random numbers
# The row below define the treatment group based on the random numbers generated. This is where we guarantee randomization
data$status_rank <-  case_when(data$rank <= 50 ~ "Control_rand", data$rank > 50 ~ "Treated_rand")
# Calculate the new means of the new groups. Need to transpose data.
means <- t(as.data.frame(tapply(data$variable, data$status_rank, mean)))
# Moving the new means to df. Each row is the difference of means
df[i,1] <- i
df[i,2] <- means[1,2] - means[1,1]
rm(means) # Deleting value
data = subset(data, select = -c(temp,rank,status_rank)) # Deleting variables
}
sum(df$diff < -1.468)
head(df$diff)
sum(df$diff > 1.468)
tail(df$diff)
for (i in seq(from = 1 , to =comb )  ) {
set.seed(i)                               # setting seed to ensure reproducibility
data$temp <- runif(100, min = 0, max = 1) # creating 100 random numbers 0 to 1
data <- data[order(data$temp),]           # sorting data by the random numbers generated in previous row
data$rank <- rank(data$temp)              # ranking by the random numbers
# The row below define the treatment group based on the random numbers generated. This is where we guarantee randomization
data$status_rank <-  case_when(data$rank <= 50 ~ "Control_rand", data$rank > 50 ~ "Treated_rand")
# Calculate the new means of the new groups. Need to transpose data.
means <- t(as.data.frame(tapply(data$variable, data$status_rank, mean)))
# Moving the new means to df. Each row is the difference of means
df[i,1] <- i
df[i,2] <- means[1,2] - means[1,1]
rm(means) # Deleting value
data = subset(data, select = -c(temp,rank,status_rank)) # Deleting variables
}
sum(df$diff < -1.468)
head(df$diff)
sum(df$diff > 1.468)
tail(df$diff)
count_data <- df %>%  mutate(x = plyr::round_any(diff, 0.1)) %>%
group_by(x) %>% mutate(y = seq_along(x))
ggplot(count_data, aes(group = order, x, y)) + # group by index is important
geom_point(size = 4) +
labs( y = "", x="", title = "Histogram of differences - Number of dots: 25.000 ")+
theme(plot.title = element_text(color="darkblue", size=35, face="bold"),
panel.background = element_rect(fill = "grey95", colour = "grey95"),
axis.text.x = element_text(face="bold", color="darkblue", size = 16),
axis.text.y = element_blank(),
legend.title = element_blank())
ggplot(count_data, aes(group = order, x, y)) + # group by index is important
geom_point(size = 2) +
labs( y = "", x="", title = "Histogram of differences - Number of dots: 25.000 ")+
theme(plot.title = element_text(color="darkblue", size=35, face="bold"),
panel.background = element_rect(fill = "grey95", colour = "grey95"),
axis.text.x = element_text(face="bold", color="darkblue", size = 16),
axis.text.y = element_blank(),
legend.title = element_blank())
ggplot(count_data, aes(group = order, x, y)) + # group by index is important
geom_point(size = 1) +
labs( y = "", x="", title = "Histogram of differences - Number of dots: 25.000 ")+
theme(plot.title = element_text(color="darkblue", size=35, face="bold"),
panel.background = element_rect(fill = "grey95", colour = "grey95"),
axis.text.x = element_text(face="bold", color="darkblue", size = 16),
axis.text.y = element_blank(),
legend.title = element_blank())
